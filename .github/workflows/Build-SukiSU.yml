姓名:构建OnePlus_Kernel
在……之上:
workflow_dispatch:
输入:
中央处理器:
描述:"分支"
必需的:正确
默认:'sm8650'
Feil:
描述:"配置文件"
必需的:正确
默认:'oneplus_ACE3_pro_v'
CPUD:
描述:"处理器代号"
必需的:正确
默认:'菠萝'
Android_VERSION:
描述:"内核安卓版本"
必需的:正确
默认:'android14'
kernel_VERSION:
描述:"内核版本"
必需的:正确
默认:'6.1'
kernel_NAME:
描述:"修改内核名称"
必需的:正确
默认:'-android14-11-o-g1132d864665d'
kernelsu_variant:
描述:"选择KSU"
必需的:正确
类型:选择
选项:
-内核
-SukiSu
默认:SukiSu
kernelsu_version:
描述:"选择KSU版本"
必需的:正确
类型:选择
选项:
-无ksu
-标签
-主要的
默认:主要的
SUSFS_ENABLED:
描述:"添加SUSFS"
必需的:正确
类型:布尔型
默认:正确
VFS_patch_ENABLED:
描述:"添加vfs补丁(新钩子)？"
必需的:正确
类型:选择
选项:
-使能够
-禁用
默认:使能够
工作:
建立:
run-on:ubuntu-最新

步骤:
-姓名:最大化构建空间
uses:easimon/maximize-build-space@master
和……一起:
根储备-mb:8192
temp-reserve-mb:2048
remove-dotnet:'true'
移除-android:'true'
去除-haskell:'true'
remove-codeql:'true'

-姓名:配置Git
跑:|
git配置--global user.name"ychenxuan"
git配置-全局用户.电子邮件"3494167979@qq.com"

-姓名:安装相依性
跑:|
sudo apt更新&&sudo apt升级-y
sudo apt install-y python3git curl

-姓名:安装回购工具
跑:|
卷曲https://storage.googleapis.com/git-repo-downloads/repo>~/repo
chmod a+x~/repo
sudo mv~/repo/usr/local/bin/repo

-姓名:初始化回购并同步
跑:|
mkdir kernel_workspace&&cd kernel_workspace
回购初始-u https://github.com/OnePlusOSS/kernel_manifest.git-b参考/机头/oneplus/${{github.event.inputs.CPU}}-m${{github.event.inputs.FEIL}}.xml--深度=1
回购同步
RM kernel_platform/common/android/abi_gki_protected_exports_*||echo“没有受保护的出口！”
RM kernel_platform/msm-kernel/android/abi_gki_protected_exports_*||echo“没有受保护的出口！”
SED-i'S/-dirty//g'kernel_platform/common/scripts/setlocalversion
SED-i'S/-dirty//g'kernel_platform/msm-kernel/scripts/setlocalversion
      
-姓名：KernelSU和SukiSu版本
如果:${{github.event.inputs.kernelsu_variant=='官方'||github.event.inputs.kernelsu_variant=='SukiSU' }}
跑:|
如果[["${{github.event.inputs.kernelsu_version}}"=="标签"]]；则
回声"分支=-">>$GITHUB_ENV
Elif[["${{github.event.inputs.kernelsu_version}}"=="主要"]]；然后
回声"分支=-s susfs-stable">>$GITHUB_ENV
Fi
          
-姓名：添加KernelSu-SukiSu
如果:${{github.event.inputs.kernelsu_variant=='SukiSU' }}
跑:|
CD kernel_workspace/kernel_platform
curl-LSs"https://raw.githubusercontent.com/ShirkNeko/KernelSU/main/kernel/setup.sh"|bash${{env.branch}}
CD./KernelSU
#KSU_VERSION=$(expr$(/usr/bin/git修订列表--主要计数)"+"12606)
#echo"KSUVER=$KSU_VERSION">>$GITHUB_ENV
#sed-i"s/DKSU_VERSION=16/DKSU_VERSION=${KSU_VERSION}/"内核/Makefile
          
-姓名：应用SUSFS修补程序SukiSU
如果:${{(inputs.kernelsu_variant=='SukiSU')&&github.event.inputs.SUSFS_ENABLED=='true' }}
跑:|
CD kernel_workspace
git克隆https://gitlab.com/simonpunk/susfs4ksu.git-b gki-${{github.event.inputs.ANDROID_VERSION}}-${{github.event.inputs.KERNEL_VERSION}}
吉特克隆https://github.com/ShirkNeko/SukiSU_patch.git
CD kernel_platform

#复制SUSFS修补程序
CP.。/susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{github.event.inputs.ANDROID_VERSION}}-${{github.event.inputs.KERNEL_VERSION}}.patch./common/
CP.。/susfs4ksu/kernel_patches/fs/*./common/fs/
CP.。/susfs4ksu/kernel_patches/include/linux/*./common/include/linux/
#zram lz4kd
#cp-r.。/SukiSU_patch/other/lz4k/include/linux/*./common/include/linux
#cp-r.。/SukiSU_patch/other/lz4k/lib/*./common/lib
#cp-r.。/SukiSU_patch/other/lz4k/crypto/*./common/crypto
          
回声"正在给内核打usfs补丁"
CD./common
修补程序-p1<50_add_susfs_in_gki-${{github.event.inputs.ANDROID_VERSION}}-${{github.event.inputs.KERNEL_VERSION}}.patch||true
回显"完成"
          
-姓名:应用隐藏材料修补程序
如果:${{github.event.inputs.SUSFS_ENABLED=='true' }}
跑:|
CD kernel_workspace/kernel_platform/common
CP../../SukiSU_patch/69_hide_stuff.patch./
回显"正在打隐藏应用补丁"
patch-p1-F3<69_hide_stuff.patch
         
-姓名:应用新挂钩修补程序
如果:${{github.event.inputs.VFS_patch_ENABLED=='启用' }}
跑:|
CD kernel_workspace/kernel_platform/common
CP../../SukiSU_patch/hooks/new_hooks.patch./
回声"正在打vfs补丁"
patch-p1-F3<new_hooks.patch
回显"完成"

#if["${{github.event.inputs.KERNEL_VERSION}}"！="5.10"]；则
#cp../../SukiSU_patch/other/lz4k_patch/${{github.event.inputs.KERNEL_VERSION}/lz4kd.patch./
#patch-p1-F3<lz4kd.patch||true
#fi

-姓名:添加SUSFS配置设置
跑:|
CD kernel_workspace/kernel_platform
#添加KSU配置设置
echo"CONFIG_KSU=y">>./common/arch/arm64/configs/gki_defconfig

#添加VFS配置设置
如果[["${{github.event.inputs.VFS_patch_ENABLED}}"=='enable']]；则
echo"CONFIG_KSU_SUSFS_SUS_SU=n">>./common/arch/arm64/configs/gki_defconfig
echo"CONFIG_KSU_MANUAL_HOOK=y">>./common/arch/arm64/configs/gki_defconfig
其他
echo"CONFIG_KSU_SUSFS_SUS_SU=y">>./common/arch/arm64/configs/gki_defconfig
Fi
          
#添加SUSFS配置设置
echo"CONFIG_KSU_SUSFS=y">>./common/arch/arm64/configs/gki_defconfig
echo"CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y">>./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./common/arch/arm64/configs/gki_defconfig

          #if [ "${{ github.event.inputs.KERNEL_VERSION }}" != "6.6" ] && [ "${{ github.event.inputs.KERNEL_VERSION }}" != "5.10" ]; then
          #  sed -i 's/CONFIG_ZRAM=m/CONFIG_ZRAM=y/g' ./common/arch/arm64/configs/gki_defconfig
          #  sed -i 's/CONFIG_ZSMALLOC=m/CONFIG_ZSMALLOC=y/g' ./common/arch/arm64/configs/gki_defconfig
          #  sed -i 's/CONFIG_MODULE_SIG=y/CONFIG_MODULE_SIG=n/g' ./common/arch/arm64/configs/gki_defconfig
          #  echo "CONFIG_ZRAM_WRITEBACK=y" >> ./common/arch/arm64/configs/gki_defconfig
          #  echo "CONFIG_CRYPTO_LZ4K=y" >> ./common/arch/arm64/configs/gki_defconfig
          #  echo "CONFIG_CRYPTO_LZ4KD=y" >> ./common/arch/arm64/configs/gki_defconfig
          #  echo "CONFIG_CRYPTO_LZ4HC=y" >> ./common/arch/arm64/configs/gki_defconfig
          #  echo "CONFIG_CRYPTO_842=y" >> ./common/arch/arm64/configs/gki_defconfig
          #fi

          #if [ "${{ github.event.inputs.KERNEL_VERSION }}" = "6.6" ]; then
          #  echo "CONFIG_ZSMALLOC=y" >> ./common/arch/arm64/configs/gki_defconfig
          #  echo "CONFIG_ZRAM_WRITEBACK=y" >> ./common/arch/arm64/configs/gki_defconfig
          #  sed -i 's/CONFIG_ZRAM=m/CONFIG_ZRAM=y/g' ./common/arch/arm64/configs/gki_defconfig
          #  echo "CONFIG_ZRAM_WRITEBACK=y" >> ./common/arch/arm64/configs/gki_defconfig
          #  echo "CONFIG_CRYPTO_LZ4K=y" >> ./common/arch/arm64/configs/gki_defconfig
          #  echo "CONFIG_CRYPTO_LZ4KD=y" >> ./common/arch/arm64/configs/gki_defconfig
          #  echo "CONFIG_CRYPTO_LZ4HC=y" >> ./common/arch/arm64/configs/gki_defconfig
          #  echo "CONFIG_CRYPTO_842=y" >> ./common/arch/arm64/configs/gki_defconfig
          #fi

          
          # Remove check_defconfig
          sed -i 's/check_defconfig//' ./common/build.config.gki

      - name: Add make name
        run: |
         cd kernel_workspace/kernel_platform
         if [[ "${{ github.event.inputs.CPU }}" == "sm8650" || "${{ github.event.inputs.CPU }}" == "sm8750" ]]; then
           sed -i "/stable_scmversion_cmd/s/-maybe-dirty//g" ./build/kernel/kleaf/impl/stamp.bzl
         else
           sed -i '$s|echo "\$res"|echo "\${{ github.event.inputs.KERNEL_NAME }}"|' ./common/scripts/setlocalversion
         fi
  
      - name: Build kernel
        run: |
          cd kernel_workspace
          if [[ "${{ github.event.inputs.CPU }}" == "sm8650" || "${{ github.event.inputs.CPU }}" == "sm8750" ]]; then
            ./kernel_platform/build_with_bazel.py -t ${{ github.event.inputs.CPUD }} gki
          else
            LTO=thin ./kernel_platform/oplus/build/oplus_build_kernel.sh ${{ github.event.inputs.CPUD }} gki
          fi
         
      - name: Make AnyKernel3
        run: |
          # 克隆 AnyKernel3 仓库
          git clone https://github.com/Kernel-SU/AnyKernel3 --depth=1
          rm -rf ./AnyKernel3/.git

          # 定义目录路径
          dir1="./kernel_workspace/kernel_platform/out/msm-kernel-${{ github.event.inputs.CPUD }}-gki/dist/"
          dir2="./kernel_workspace/kernel_platform/common/out/arch/arm64/boot/"
          target1="./AnyKernel3/"
          target2="./kernel_workspace/kernel"

          # 在第一个目录中查找 Image 文件
          if find "$dir1" -name "Image" | grep -q "Image"; then
            echo "文件 Image 在dist目录中"
            cp "$dir1"Image "$target1"
            cp "$dir1"Image "$target2"
          else
            # 在第二个目录中查找 Image 文件
            if find "$dir2" -name "Image" | grep -q "Image"; then
              echo "文件 Image 在arch/arm64/boot目录中"
              cp "$dir2"Image "$target1"
              cp "$dir2"Image "$target2"
            else
              # 在 kernel_workspace/kernel_platform/common/out/ 的所有子目录中查找 Image 文件
              echo "在 kernel_workspace/kernel_platform/common/out/ 的所有子目录中查找 Image 文件"
              image_path=$(find "./kernel_workspace/kernel_platform/common/out/" -name "Image" | head -n 1)
              
              if [ -n "$image_path" ]; then
                echo "找到 Image 文件: $image_path"
                cp "$image_path" "$target1"
                cp "$image_path" "$target2"
              else
                echo "在所有目录中未找到 Image 文件，构建可能失败"
              fi
            fi
          fi
         
         
      - name: Upload AnyKernel3
        uses: actions/upload-artifact@v4
        with:
         name: AnyKernel3_KernelSU_${{ env.KSUVER }}_${{ github.event.inputs.FEIL }}
         path: ./AnyKernel3/*

      - name: Upload Image
        uses: actions/upload-artifact@v4
        with:
         name: Image_KernelSU_${{ env.KSUVER }}_${{ github.event.inputs.FEIL }}
         path: kernel_workspace/kernel
